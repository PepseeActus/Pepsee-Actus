@import "colors";
@import "typography";

// Grid breakpoints
//
// Define the minimum dimensions at which your layout will change,
// adapting to different screen sizes, for use in media queries.

$grid-breakpoints: (
	xs: 0,
	sm: 375px,
	md: 768px,
	lg: 1024px,
	xl: 1280px
) !default;

@include _assert-ascending($grid-breakpoints, "$grid-breakpoints");
@include _assert-starts-at-zero($grid-breakpoints);

// Grid containers
//
// Define the maximum width of `.container` for different screen sizes.
$container-max-widths: (
	sm: 350px,
	md: 670px,
	lg: 860px,
	xl: 1150px
) !default;

@include _assert-ascending($container-max-widths, "$container-max-widths");

// Grid columns
//
// Set the number of columns and specify the width of the gutters.
$grid-columns:                12 !default;
$grid-gutter-width:           20px !default;
$small-gutter-width:          10px !default;

// media queries mixins
@mixin media($b) {
	@if $b == 'phone-small' {
		@include media-breakpoint-down(xs) {
			@content;
		}
	} @else if $b == 'phone' {
		@include media-breakpoint-down(sm) {
			@content;
		}
	} @else if $b == 'phone-tablet' {
		@include media-breakpoint-down(md) {
			@content;
		}
	} @else if $b == 'phone-tablet-desktop-small' {
		@include media-breakpoint-down(lg) {
			@content;
		}
	} @else if $b == 'tablet-only' or $b == 'tablet' {
		@include media-breakpoint-only(md) {
			@content;
		}
	} @else if $b == 'desktop-small-only' or $b == 'desktop-small' {
		@include media-breakpoint-only(lg) {
			@content;
		}
	} @else if $b == 'phone-tablet-desktop' {
		@include media-breakpoint-up(sm) {
			@content;
		}
	} @else if $b == 'tablet-desktop' {
		@include media-breakpoint-up(md) {
			@content;
		}
	} @else if $b == 'desktop' {
		@include media-breakpoint-up(lg) {
			@content;
		}
	} @else if $b == 'desktop-large' {
		@include media-breakpoint-up(xl) {
			@content;
		}
	}	
	@else {
		@content;
	}
}

// global classes
@mixin visually-hidden() {
	border: 0;
	clip: rect(0 0 0 0);
	height: 1px;
	margin: -1px;
	overflow: hidden;
	padding: 0;
	position: absolute;
	width: 1px;
}

.visually-hidden {
	@include visually-hidden();
}

@mixin visually-visible() {
	position: relative;
	width: auto;
	height: auto;
	margin: 0;
	overflow: visible;
	display: inline-block;
	clip: auto;
}

.padding-inside {
	padding-top: 2rem;
	padding-bottom: 2rem;
}

.margin-outside {
	margin-top: 5rem;
	margin-bottom: 5rem;

	@media screen and (max-width: 768px) {
		margin-top: 2rem;
		margin-bottom: 2rem;
	}
}

.post-meta {
	font-size: 1.2rem;
	margin-top: 2rem;
}

.rotate {
	position: relative;
	box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.5);
	border-radius: 50%;
	overflow: hidden;   
	border: 2px solid $color__grey;
	display: block;

	&::before {
		position: absolute;
		content: '';
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
		width: 2rem;
		height: 2rem;
		border: 1px solid $color__grey;
		border-radius: 50%;
		z-index: 1;
	}

	&::after {
		position: absolute;
		content: '';
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
		width: 1rem;
		height: 1rem;
		background-color: $color__grey;
		border-radius: 50%;
		box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.5);         
	}

	&:hover {
		animation: rotating 2s linear infinite;
	}

	@keyframes rotating {
		from {
			transform: rotate(0deg);
		}
		to {
			transform: rotate(360deg);
		}
	}
}

.title-angle {
	@media screen and (min-width: 768px) {
		cursor: pointer;
		-webkit-text-stroke-color: #fff;
		-webkit-text-stroke-width: 0.02em;
		-webkit-text-fill-color: transparent;
		-webkit-background-clip: text;
		background-repeat: no-repeat;
		transition: background-size .5s cubic-bezier(0.67, 0.01, 0.15, 0.98);
		background-image: linear-gradient(135deg, #fff 0%, #fff 50%, transparent 50.1%);
		background-size: 0% 100%;
		
		&:hover {
			background-size: 220% 100%;
		}
	}
}